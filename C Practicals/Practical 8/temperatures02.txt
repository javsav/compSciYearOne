                                  input                                                                                                                                            expected temperatures                                                                                                                                                                                                                                                                                                                                                                                                               actual temperatures
                              100 0s and -100       0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0   0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0                                                                                                                                                 
                             0 1 2 3 4 5 -100                                                                                                                                       5.0 4.0 3.0 2.0 1.0                                                                                                                                                                                                                                                                                                                                                                                                                5.0 4.0 3.0 2.0 1.0 
                                   a                                                                                                                 ERROR: Invalid input: letter, character, or excessively large number. ABORTING PROGRAM.                                                                                                                                                                                                                                                                                                                                    ERROR: Invalid input: letter, character, or excessively large number. ABORTING PROGRAM.                                                                               
0 -20.5 -33.2 40.5 12.4497230280902 3 9.2 3.6 4.4 5.5 6.5 7.4 15.49 17.51 45.4999 -10.01 -15.4999999 17.223 24 22 -100                         22.0 24.0 17.2 -15.5 -10.0 45.5 17.5 15.5 7.4 6.5 5.5 4.4 3.6 9.2 3.0 12.4 40.5 -33.2 -20.5 0.0                                                                                                                                                                                                                                                                                                                                  22.0 24.0 17.2 -15.5 -10.0 45.5 17.5 15.5 7.4 6.5 5.5 4.4 3.6 9.2 3.0 12.4 40.5 -33.2 -20.5 0.0
-100.0001 23.499999 24.5000001 25.49999 26.50000001 -100.000000000000000000001                                                                                                  26.5 25.5 24.5 23.5 -100.0                                                                                                                                                                                                                                                                                                                                                                                                           26.5 25.5 24.5 23.5 -100.0
                                  5, 2, !                                                                                                            ERROR: Invalid input: letter, character, or excessively large number. ABORTING PROGRAM.                                                                                                                                                                                                                                                                                                                                    ERROR: Invalid input: letter, character, or excessively large number. ABORTING PROGRAM.

Test case one is somewhat of a boundary case, inputting a large number of values, to see if the memory buffer would ever overflow and we would get a malloc error. With 100 float inputs, it did not overflow. It would require much more (at least on this computer with 16GB of ram) to overflow, as it was able to handle 99999999999999999 integers of memory in temperatures01.c, so it may handle the same number of floats, or at least (99999999999999999 / 2) floats before the memory was overallocated.
   I don't have the time or energy to sit there and enter that many floats. We can safely assume that at some stage, it will be too much memory to allocate in the heap. Obviously, there is no way to determine whether these temperatures have been reversed, because they are all identical.
Test case two is a test of whether the doubling of the array memory after 5 values has been entered is still properly considered by my algorithm when returning the temperatures in reverse (i.e. it doesn't return 5 floats and 5 numbers of garbage data). Because I used a counter independent of the loop index, I was able to get it to only print out the numbere of floats that were entered before -100 was input, so the program behaved as expected. It als reverses the temperatures as expected.
Test case three is to check for defensive programming - namely error detection when a character is put in as a temperature. The program returns the error message and aborts as soon as a character is input as a tmperature, as expected.
Test case four is another test of dynamic memory allocation, but obviously nowhere near as extreme as that in test case one. It is also a test of the handling of negative floats, and the rounding of the floats. Thankfully, the floats are rounded as expceted, and the temperatures are returned in reverse order as expected.
Test case five is a test to show how a float only allows for a certain number of digits of precision, so as expected, it does not terminate input on the first entry of -100.0001, because it doesn't consider that to equal -100 (even though when it is printed, it is rounded to -100), however, a float of -100.000000000000000000001 is considered equal to -100, amd terminates entry, as expected. If the temperatures had been input as doubles, it is possible that this number would not have terminated entry.
Test case six enters two valid temperatures followed by an invalid character that is not a temperature, and as such, in the nature of defensive programming, the program throws the error message seen in test case three, and aborts, as expected.   



