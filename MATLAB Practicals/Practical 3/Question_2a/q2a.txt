         Original Cells                             Theoretical Output                        Matlab Output
     A                      B                             New A                                   New A
   {1:5}                 {6:10}                1, 2, 3, 4, 5, 6, 7, 8, 9, 10,               1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
{1.3, "two", 2.8}    {'Euler', 5, "flower"}      1, two, 3, Euler, 5, flower                  1, two, 3, Euler, 5, flower
 {1:4, 'a':'d'}      {'e':'h', 5, 6, 7, 8}      1, 2, 3, 4, abcd, efgh, 5, 6, 7, 8          1, 2, 3, 4, abcd, efgh, 5, 6, 7, 8


Test case 1 is a simple evaulation of appending the integers from 6-10 to the end of integers 1-5.
The comma at the end of the output is consistent with the lack of coding for the final index
of a float to not have a comma displayed; this would require using split(A{item, '') and
converting it into a matrix using cell2mat(A{item}), followed by a for loop to output each value followed
by a comma and space, except for the final value.

Test case 2 tests a combination of floats (rounded output), integers, character vectors and string arrays,
which are successfully output (1.3 -> 1 and 2.8 -> 3). Note that neither 'Euler' nor "two or "flower" are not split into E, u, l, e, r 
nor T, w, o nor F, l o, w, e, r respectively, despite different classes (character vectors and string arrays.)

Test case 3 uses integer ranges, character ranges, and integers, and highlights why writing code to split concatenated character
vectors could be useful (as mentioned in the discussion for test case 1), to prevent outputs "abcd" and "efgh",
however if all character vectors were split this would mean that 'Euler' in test case 2 would be output as E, u, l, e, r.